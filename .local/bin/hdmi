#!/bin/sh

# Uma interface para detectar e selecionar todos os monitores. Usa o xrandr para 
# identificar os monitores conectados e permite ao usu치rio selecionar qual usar. 
# Tamb칠m permite "sele칞칚o manual", que abre o arandr.

twoscreen() { # Se a op칞칚o multi-monitor for escolhida e houver dois monitores.

    mirror=$(printf "n칚o\\nsim" | dmenu -i -p "Espelhar monitores?")
    # Espelha os monitores usando a resolu칞칚o nativa do externo e escala no interno
    if [ "$mirror" = "sim" ]; then
        external=$(echo "$screens" | dmenu -i -p "Otimizar resolu칞칚o para:")
        internal=$(echo "$screens" | grep -v "$external")

        res_external=$(xrandr --query | sed -n "/^$external/,/\+/p" | \
            tail -n 1 | awk '{print $1}')
        res_internal=$(xrandr --query | sed -n "/^$internal/,/\+/p" | \
            tail -n 1 | awk '{print $1}')

        res_ext_x=$(echo "$res_external" | sed 's/x.*//')
        res_ext_y=$(echo "$res_external" | sed 's/.*x//')
        res_int_x=$(echo "$res_internal" | sed 's/x.*//')
        res_int_y=$(echo "$res_internal" | sed 's/.*x//')

        scale_x=$(echo "$res_ext_x / $res_int_x" | bc -l)
        scale_y=$(echo "$res_ext_y / $res_int_y" | bc -l)

        xrandr --output "$external" --auto --scale 1.0x1.0 \
            --output "$internal" --auto --same-as "$external" \
            --scale "$scale_x"x"$scale_y"
    else
        primary=$(echo "$screens" | dmenu -i -p "Selecione o monitor principal:")
        secondary=$(echo "$screens" | grep -v ^"$primary"$)
        direction=$(printf "left-of\\nright-of\\nabove" | dmenu -i -p "Onde o monitor secund치rio ficar치 em rela칞칚o ao $primary?")
        xrandr --output "$primary" --auto --scale 1.0x1.0 --output "$secondary" --"$direction" "$primary" --auto --scale 1.0x1.0
    fi
}

morescreen() { # Se houver mais de dois monitores conectados
	primary=$(echo "$screens" | dmenu -i -p "Selecione o monitor principal:")
	secondary=$(echo "$screens" | grep -v ^"$primary"$ | dmenu -i -p "Selecione o monitor secund치rio:")
	direction=$(printf "left-of\\nright-of\\nabove" | dmenu -i -p "Onde o $secondary ficar치 em rela칞칚o ao $primary?")
	tertiary=$(echo "$screens" | grep -v ^"$primary"$ | grep -v ^"$secondary"$ | dmenu -i -p "Selecione o terceiro monitor:")
	xrandr --output "$primary" --auto --output "$secondary" --"$direction" "$primary" --auto --output "$tertiary" --"$(printf "left-of\\nright-of\\nabove" | grep -v "$direction")" "$primary" --auto
}

multimon() { # Multi-monitor handler
	case "$(echo "$screens" | wc -l)" in
		2) twoscreen ;;
		*) morescreen ;;
	esac
}

onescreen() { # Se apenas um monitor estiver dispon칤vel ou for escolhido
	xrandr --output "$1" --auto --scale 1.0x1.0 $(echo "$allposs" | grep -v "\b$1" | awk '{print "--output", $1, "--off"}' | paste -sd ' ' -)
}

postrun() { # P칩s-configura칞칚o
	setwall		# Ajusta o papel de parede caso tamanho/arranjo da tela mude
	{ killall dunst ; setsid -f dunst ;} >/dev/null 2>&1 # Reinicia o dunst para atualizar posi칞칚o
}

# Detecta todos os monitores poss칤veis
allposs=$(xrandr -q | grep "connected")

# Lista apenas os que est칚o conectados
screens=$(echo "$allposs" | awk '/ connected/ {print $1}')

# Se s칩 houver um monitor
[ "$(echo "$screens" | wc -l)" -lt 2 ] &&
	{ onescreen "$screens"; postrun; notify-send "游눹 Apenas um monitor detectado." ; exit ;}

# Oferece escolha ao usu치rio
chosen=$(printf "%s\\nm칰ltiplos monitores\\nsele칞칚o manual" "$screens" | dmenu -i -p "Selecione o arranjo de monitores:") &&
case "$chosen" in
	"sele칞칚o manual") lxrandr ; exit ;;
	"m칰ltiplos monitores") multimon ;;
	*) onescreen "$chosen" ;;
esac

postrun

